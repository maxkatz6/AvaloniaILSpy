<?xml version="1.0" encoding="utf-8"?>
<Window
	x:Class="ICSharpCode.ILSpy.MainWindow"
	x:ClassModifier="public"
	xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:tv="clr-namespace:ICSharpCode.TreeView;assembly=ICSharpCode.TreeView"
	xmlns:local="clr-namespace:ICSharpCode.ILSpy"
	xmlns:search="clr-namespace:ICSharpCode.ILSpy.Search"
	xmlns:avalondock="https://github.com/Dirkster99/AvalonDock"
	xmlns:controls="clr-namespace:ICSharpCode.ILSpy.Controls"
	xmlns:docking="clr-namespace:ICSharpCode.ILSpy.Docking"
	xmlns:analyzers="clr-namespace:ICSharpCode.ILSpy.Analyzers"
	xmlns:properties="clr-namespace:ICSharpCode.ILSpy.Properties"
	Title="ILSpy"
	MinWidth="250"
	MinHeight="200"
	UseLayoutRounding="True"
	Closing="OnClosing"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" d:DesignHeight="500" d:DesignWidth="500"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
	xmlns:styles="urn:TomsToolbox.Wpf.Styles"
	xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:themes="clr-namespace:ICSharpCode.ILSpy.Themes"
	xmlns:toms="urn:TomsToolbox"
	xmlns:input="using:Avalonia.Labs.Input"
	xmlns:shared="using:ICSharpCode"
	xmlns:system="clr-namespace:System;assembly=System.Runtime"
	xmlns:treeNodes="clr-namespace:ICSharpCode.ILSpy.TreeNodes"
	d:DataContext="{d:DesignInstance local:MainWindowViewModel}"
>
	<Window.Resources>
		<docking:ActiveTabPageConverter x:Key="ActiveTabPageConverter"/>

		<tv:SharpTreeView x:Key="AssemblyTreeView"
				AutomationProperties.Name="Assemblies and Classes"
				SelectionChanged="TreeView_SelectionChanged"
				ShowRoot="False"
				AllowDropOrder="True"
				DragDrop.AllowDrop="True"
				BorderThickness="0" IsVisible="True">
			<tv:SharpTreeView.ItemContainerTheme>
				<ControlTheme TargetType="tv:SharpTreeViewItem">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type tv:SharpTreeViewItem}"
							                 x:DataType="treeNodes:AssemblyTreeNode">
								<Border x:Name="NodeRootBorder"
								        Background="Transparent"
								        Classes.isAutoLoaded="{Binding IsAutoLoaded}"
								        Classes.isPublicAPI="{Binding IsPublicAPI}">
									<Border Background="{TemplateBinding Background}">
										<tv:SharpTreeNodeView x:Name="nodeView" HorizontalAlignment="Left" />
									</Border>
								</Border>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Style Selector="^ /template/ Border#NodeRootBorder.isAutoLoaded">
						<Setter Property="Foreground" Value="SteelBlue" />
					</Style>
					<Style Selector="^ /template/ Border#NodeRootBorder.isPublicAPI">
						<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ResourceKeys.GrayTextBrushKey}}" />
					</Style>
					<Style Selector="^[IsSelected=true] /template/ tv|SharpTreeNodeView#nodeView">
						<Setter Property="TextBackground" Value="{DynamicResource {x:Static themes:ResourceKeys.HighlightBrushKey}}" />
						<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ResourceKeys.HighlightTextBrushKey}}" />
					</Style>
					<Style Selector="^:disabled /template/ tv|SharpTreeNodeView#nodeView">
						<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ResourceKeys.GrayTextBrushKey}}" />
					</Style>
				</ControlTheme>
			</tv:SharpTreeView.ItemContainerTheme>
		</tv:SharpTreeView>

		<DataTemplate x:Key="AssemblyListPaneTemplate">
			<ContentControl Content="{StaticResource AssemblyTreeView}" />
		</DataTemplate>

		<local:DebugSteps x:Key="DebugSteps" />

		<DataTemplate x:Key="DebugStepsPaneTemplate">
			<ContentControl Content="{StaticResource DebugSteps}" />
		</DataTemplate>

		<search:SearchPane x:Key="SearchPane" />

		<DataTemplate x:Key="SearchPaneTemplate">
			<ContentControl Content="{StaticResource SearchPane}" />
		</DataTemplate>

		<analyzers:AnalyzerTreeView x:Key="AnalyzerTreeView" />

		<DataTemplate x:Key="AnalyzerPaneTemplate">
			<ContentControl Content="{StaticResource AnalyzerTreeView}" />
		</DataTemplate>

		<DataTemplate x:Key="DefaultContentTemplate">
			<ContentPresenter Content="{Binding Content}" />
		</DataTemplate>

		<controls:CultureSelectionConverter x:Key="cultureSelectionConverter" />

	</Window.Resources>

	<input:CommandManager.CommandBindings>
		<input:CommandBinding
			Command="{x:Static shared:ApplicationCommands.Open}"
			Executed="OpenCommandExecuted" />
		<input:CommandBinding
			Command="{x:Static local:NavigationCommands.Refresh}"
			Executed="RefreshCommandExecuted" />
		<input:CommandBinding
			Command="{x:Static shared:ApplicationCommands.Save}"
			CanExecute="SaveCommandCanExecute"
			Executed="SaveCommandExecuted" />
		<input:CommandBinding
			Command="{x:Static local:NavigationCommands.BrowseBack}"
			CanExecute="BackCommandCanExecute"
			Executed="BackCommandExecuted" />
		<input:CommandBinding
			Command="{x:Static local:NavigationCommands.BrowseForward}"
			CanExecute="ForwardCommandCanExecute"
			Executed="ForwardCommandExecuted" />
		<input:CommandBinding
			Command="{x:Static local:NavigationCommands.Search}"
			Executed="SearchCommandExecuted" />
	</input:CommandManager.CommandBindings>
	<!-- -->
	<!-- <Window.InputBindings> -->
	<!-- 	<KeyBinding Key="R" Modifiers="Control" Command="{x:Static local:ILSpyCommands.Analyze}" /> -->
	<!-- </Window.InputBindings> -->
	<!-- <Window.TaskbarItemInfo> -->
	<!-- 	<TaskbarItemInfo /> -->
	<!-- </Window.TaskbarItemInfo> -->
	<DockPanel>
		<!-- Main menu -->
		<Menu DockPanel.Dock="Top" Name="mainMenu" Height="23" KeyboardNavigation.TabNavigation="None">
			<MenuItem Header="{x:Static properties:Resources._File}" Tag="_File" />
			<!-- contents of file menu are added using MEF -->
			<MenuItem Header="{x:Static properties:Resources._View}" Tag="_View">
				<MenuItem Header="{x:Static properties:Resources.Show_publiconlyTypesMembers}" ToggleType="CheckBox" IsChecked="{Binding Workspace.ActiveTabPage.FilterSettings.ApiVisPublicOnly}" />
				<MenuItem Header="{x:Static properties:Resources.Show_internalTypesMembers}" ToggleType="CheckBox" IsChecked="{Binding Workspace.ActiveTabPage.FilterSettings.ApiVisPublicAndInternal}" />
				<MenuItem Header="{x:Static properties:Resources.Show_allTypesAndMembers}" ToggleType="CheckBox" IsChecked="{Binding Workspace.ActiveTabPage.FilterSettings.ApiVisAll}" />
				<Separator/>
				<MenuItem Header="{x:Static properties:Resources.Theme}" ItemsSource="{x:Static themes:ThemeManager.AllThemes}">
					<MenuItem.ItemContainerTheme>
						<ControlTheme TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
							<Setter Property="Command" Value="{x:Static local:ILSpyCommands.SetTheme}" />
							<Setter Property="CommandParameter" Value="{Binding x:DataType=system:String}" />
							<Setter Property="ToggleType" Value="CheckBox" /> <!-- Required by AvalonDock's MenuItem style to show the checkmark -->
							<Setter Property="IsChecked">
								<Setter.Value>
									<MultiBinding Converter="{x:Static controls:BinaryOperationConverter.Equality}" Mode="OneWay">
										<Binding x:DataType="system:String" />
										<Binding Path="$parent[local:MainWindow].SessionSettings.Theme" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</ControlTheme>
					</MenuItem.ItemContainerTheme>
				</MenuItem>
				<MenuItem Header="{x:Static properties:Resources.UILanguage}">
					<MenuItem Header="{x:Static properties:Resources.UILanguage_System}" ToggleType="CheckBox" IsChecked="{Binding SessionSettings.CurrentCulture, Converter={StaticResource cultureSelectionConverter}, ConverterParameter={x:Null}}" />
					<MenuItem Header="English" ToggleType="CheckBox" IsChecked="{Binding SessionSettings.CurrentCulture, Converter={StaticResource cultureSelectionConverter}, ConverterParameter=en-US}" />
					<MenuItem Header="中文" ToggleType="CheckBox" IsChecked="{Binding SessionSettings.CurrentCulture, Converter={StaticResource cultureSelectionConverter}, ConverterParameter=zh-Hans}" />
				</MenuItem>
			</MenuItem>
			<MenuItem Header="{x:Static properties:Resources._Window}" Tag="_Window" />
		</Menu>
		<!-- ToolBar -->
		<ListBox
			Name="toolBar"
			DockPanel.Dock="Top" KeyboardNavigation.TabNavigation="None">
			<ListBox.ItemsPanel>
				<ItemsPanelTemplate>
					<StackPanel Orientation="Horizontal" Spacing="4" />
				</ItemsPanelTemplate>
			</ListBox.ItemsPanel>
			<ListBox.Resources>
				<!-- Make images transparent if menu command is disabled -->
				<Style Selector="Button:disabled > Image">
					<!-- TODO Avalonia: effects? should be easier to do the same without them, but later -->
					<!-- <Setter Property="Effect" Value="{DynamicResource {x:Static themes:ResourceKeys.ThemeAwareButtonEffect}}" /> -->
					<Setter Property="Opacity" Value="0.30" />
				</Style>
			</ListBox.Resources>
			<!-- 'Navigation' toolbar category is inserted here -->
			<Separator />
			<!-- 'Open' toolbar category is inserted here -->
			<Separator />
			<ComboBox Name="assemblyListComboBox" Width="100" MaxDropDownHeight="Auto"
			          ItemsSource="{Binding AssemblyListManager.AssemblyLists}" ToolTip.Tip="{x:Static properties:Resources.SelectAssemblyListDropdownTooltip}"
			          SelectedItem="{Binding SessionSettings.ActiveAssemblyList}"/>
			<Button Command="{x:Static local:ILSpyCommands.ManageAssemblyListsCommand}" ToolTip.Tip="{x:Static properties:Resources.ManageAssemblyLists}">
				<Image Width="16" Height="16" Source="{controls:XamlResource Images/AssemblyList}" />
			</Button>
			<Separator />
			<CheckBox IsChecked="{Binding Workspace.ActiveTabPage.FilterSettings.ApiVisPublicOnly}" ToolTip.Tip="{x:Static properties:Resources.ShowPublicOnlyTypesMembers}">
				<Image Width="16" Height="16" Source="{controls:XamlResource Images/ShowPublicOnly}" />
			</CheckBox>
			<CheckBox IsChecked="{Binding Workspace.ActiveTabPage.FilterSettings.ApiVisPublicAndInternal}" ToolTip.Tip="{x:Static properties:Resources.ShowInternalTypesMembers}">
				<Image Width="16" Height="16" Source="{controls:XamlResource Images/ShowPrivateInternal}" />
			</CheckBox>
			<CheckBox IsChecked="{Binding Workspace.ActiveTabPage.FilterSettings.ApiVisAll}" ToolTip.Tip="{x:Static properties:Resources.ShowAllTypesAndMembers}">
				<Image Width="16" Height="16" Source="{controls:XamlResource Images/ShowAll}" />
			</CheckBox>
			<Separator />
			<ComboBox Name="languageComboBox" DisplayMemberBinding="{Binding Name}" Width="100" MaxDropDownHeight="Auto"
					  IsEnabled="{Binding Workspace.ActiveTabPage.SupportsLanguageSwitching}"
			          ItemsSource="{x:Static local:Languages.AllLanguages}" ToolTip.Tip="{x:Static properties:Resources.SelectLanguageDropdownTooltip}"
			          SelectedItem="{Binding Workspace.ActiveTabPage.FilterSettings.Language}"/>
			<ComboBox Name="languageVersionComboBox" DisplayMemberBinding="{Binding DisplayName}" Width="120" MaxDropDownHeight="Auto" ToolTip.Tip="{x:Static properties:Resources.SelectVersionDropdownTooltip}"
			          IsVisible="{Binding SelectedItem.HasLanguageVersions, ElementName=languageComboBox}"
					  IsEnabled="{Binding Workspace.ActiveTabPage.SupportsLanguageSwitching}"
			          ItemsSource="{Binding SelectedItem.LanguageVersions, ElementName=languageComboBox, UpdateSourceTrigger=PropertyChanged}"
			          SelectedItem="{Binding Workspace.ActiveTabPage.FilterSettings.LanguageVersion, UpdateSourceTrigger=PropertyChanged}"/>
		</ListBox>
		<Border DockPanel.Dock="Top" BorderBrush="Black" BorderThickness="1" Name="updatePanel" IsVisible="False">
			<DockPanel KeyboardNavigation.TabNavigation="Contained">
				<Button DockPanel.Dock="Right" Click="updatePanelCloseButtonClick" MinWidth="0">X</Button>
				<StackPanel Orientation="Horizontal">
					<TextBlock Name="updatePanelMessage" Margin="4,0" VerticalAlignment="Center"  Text="{x:Static properties:Resources.ILSpyVersionAvailable}" />
					<Button Name="downloadOrCheckUpdateButton" Click="downloadOrCheckUpdateButtonClick" Content="{x:Static properties:Resources.Download}"/>
				</StackPanel>
			</DockPanel>
		</Border>
		<!-- Status bar -->
		<Border x:Name="statusBar" DockPanel.Dock="Bottom" Height="26" IsVisible="False">
			<TextBlock VerticalAlignment="Center"
			           HorizontalAlignment="Right"
			           x:Name="StatusLabel"
			           ToolTip.Tip="{x:Static properties:Resources.Status}"
			           Text="{x:Static properties:Resources.StandBy}"/>
		</Border>

		<avalondock:DockingManager x:Name="DockManager"
									DataContext="{Binding Workspace}"
									AnchorablesSource="{Binding ToolPanes}"
									DocumentsSource="{Binding TabPages}"
									ActiveContent="{Binding ActiveTabPage, Mode=TwoWay, Converter={StaticResource ActiveTabPageConverter}}"
									AllowMixedOrientation="True">

			<avalondock:DockingManager.DocumentHeaderTemplate>
				<DataTemplate>
					<TextBlock x:Name="headerText" Text="{Binding Title}" />
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding IsActive}" Value="True">
							<Setter TargetName="headerText" Property="FontWeight" Value="Bold" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</avalondock:DockingManager.DocumentHeaderTemplate>

			<avalondock:DockingManager.LayoutItemContainerStyleSelector>
				<docking:PaneStyleSelector>
					<docking:PaneStyleSelector.ToolPaneStyle>
						<Style TargetType="{x:Type avalondock:LayoutAnchorableItem}">
							<Setter Property="Title" Value="{Binding Model.Title}"/>
							<Setter Property="IsVisible" Value="{Binding Model.IsVisible, Mode=TwoWay}"/>
							<Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
							<Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
							<Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
							<Setter Property="CanHide" Value="{Binding Model.IsCloseable}" />
							<Setter Property="HideCommand" Value="{Binding Model.CloseCommand}" />
							<Setter Property="CanClose" Value="{Binding Model.IsCloseable}" />
							<Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}" />
						</Style>
					</docking:PaneStyleSelector.ToolPaneStyle>
					<docking:PaneStyleSelector.TabPageStyle>
						<Style TargetType="{x:Type avalondock:LayoutItem}">
							<Setter Property="Title" Value="{Binding Model.Title}"/>
							<Setter Property="IsVisible" Value="{Binding Model.IsVisible, Mode=TwoWay}"/>
							<Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
							<Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
							<Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
							<Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}" />
							<Setter Property="CanClose" Value="{Binding Model.IsCloseable, Mode=TwoWay}" />
						</Style>
					</docking:PaneStyleSelector.TabPageStyle>
				</docking:PaneStyleSelector>
			</avalondock:DockingManager.LayoutItemContainerStyleSelector>
		</avalondock:DockingManager>
	</DockPanel>
</Window>
